// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mangas.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const deleteManga = `-- name: DeleteManga :exec
DELETE FROM mangas
WHERE id = $1 AND user_id = $2
`

type DeleteMangaParams struct {
	ID     string
	UserID sql.NullString
}

func (q *Queries) DeleteManga(ctx context.Context, arg DeleteMangaParams) error {
	_, err := q.db.ExecContext(ctx, deleteManga, arg.ID, arg.UserID)
	return err
}

const insertMangaIntoCatalog = `-- name: InsertMangaIntoCatalog :exec
INSERT INTO mangas (
    id, status, user_id, title, issue_number,
    publication_date, storyline, cover_art_url, updated_at,
    images, authors, serializations, genres, explicit_genres,
    themes, demographics, score, scored_by, rank,
    popularity, members, favorites, synopsis, background,
    relations, external_links
)
VALUES (
    $1, $2, $3, $4, $5,
    $6, $7, $8, $9,
    $10, $11, $12, $13, $14,
    $15, $16, $17, $18, $19,
    $20, $21, $22, $23, $24,
    $25, $26
)
`

type InsertMangaIntoCatalogParams struct {
	ID              string
	Status          NullStatus
	UserID          sql.NullString
	Title           string
	IssueNumber     int32
	PublicationDate time.Time
	Storyline       sql.NullString
	CoverArtUrl     sql.NullString
	UpdatedAt       sql.NullTime
	Images          pqtype.NullRawMessage
	Authors         pqtype.NullRawMessage
	Serializations  pqtype.NullRawMessage
	Genres          pqtype.NullRawMessage
	ExplicitGenres  pqtype.NullRawMessage
	Themes          pqtype.NullRawMessage
	Demographics    pqtype.NullRawMessage
	Score           sql.NullFloat64
	ScoredBy        sql.NullInt32
	Rank            sql.NullInt32
	Popularity      sql.NullInt32
	Members         sql.NullInt32
	Favorites       sql.NullInt32
	Synopsis        sql.NullString
	Background      sql.NullString
	Relations       pqtype.NullRawMessage
	ExternalLinks   pqtype.NullRawMessage
}

func (q *Queries) InsertMangaIntoCatalog(ctx context.Context, arg InsertMangaIntoCatalogParams) error {
	_, err := q.db.ExecContext(ctx, insertMangaIntoCatalog,
		arg.ID,
		arg.Status,
		arg.UserID,
		arg.Title,
		arg.IssueNumber,
		arg.PublicationDate,
		arg.Storyline,
		arg.CoverArtUrl,
		arg.UpdatedAt,
		arg.Images,
		arg.Authors,
		arg.Serializations,
		arg.Genres,
		arg.ExplicitGenres,
		arg.Themes,
		arg.Demographics,
		arg.Score,
		arg.ScoredBy,
		arg.Rank,
		arg.Popularity,
		arg.Members,
		arg.Favorites,
		arg.Synopsis,
		arg.Background,
		arg.Relations,
		arg.ExternalLinks,
	)
	return err
}

const retrieveCatalog = `-- name: RetrieveCatalog :many
SELECT m.title, m.authors, m.status, m.cover_art_url, m.issue_number
FROM mangas m
JOIN users u ON m.user_id = u.id
WHERE u.username = $1
`

type RetrieveCatalogRow struct {
	Title       string
	Authors     pqtype.NullRawMessage
	Status      NullStatus
	CoverArtUrl sql.NullString
	IssueNumber int32
}

func (q *Queries) RetrieveCatalog(ctx context.Context, username string) ([]RetrieveCatalogRow, error) {
	rows, err := q.db.QueryContext(ctx, retrieveCatalog, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveCatalogRow
	for rows.Next() {
		var i RetrieveCatalogRow
		if err := rows.Scan(
			&i.Title,
			&i.Authors,
			&i.Status,
			&i.CoverArtUrl,
			&i.IssueNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusRead = `-- name: UpdateStatusRead :exec
UPDATE mangas 
SET status = 'read'
WHERE id = $1 AND user_id = $2
`

type UpdateStatusReadParams struct {
	ID     string
	UserID sql.NullString
}

func (q *Queries) UpdateStatusRead(ctx context.Context, arg UpdateStatusReadParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusRead, arg.ID, arg.UserID)
	return err
}

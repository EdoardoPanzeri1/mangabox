// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comics.sql

package database

import (
	"context"
	"database/sql"
)

const getComicByID = `-- name: GetComicByID :one
SELECT id, title, issue_number, publication_date, storyline, cover_art_url, read, user_id, updated_at FROM comics WHERE id = $1
`

func (q *Queries) GetComicByID(ctx context.Context, id string) (Comic, error) {
	row := q.db.QueryRowContext(ctx, getComicByID, id)
	var i Comic
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IssueNumber,
		&i.PublicationDate,
		&i.Storyline,
		&i.CoverArtUrl,
		&i.Read,
		&i.UserID,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserFavorites = `-- name: GetUserFavorites :many

SELECT comics.id, comics.title, comics.issue_number, comics.publication_date, comics.storyline, comics.cover_art_url, comics.read, comics.user_id, comics.updated_at
FROM comics
JOIN user_comics ON comics.id = user_comics.comic_id
WHERE user_comics.user_id = $1
`

func (q *Queries) GetUserFavorites(ctx context.Context, userID sql.NullString) ([]Comic, error) {
	rows, err := q.db.QueryContext(ctx, getUserFavorites, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comic
	for rows.Next() {
		var i Comic
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IssueNumber,
			&i.PublicationDate,
			&i.Storyline,
			&i.CoverArtUrl,
			&i.Read,
			&i.UserID,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusRead = `-- name: UpdateStatusRead :exec

UPDATE comics SET read = $1, updated_at = $2
WHERE id = $3
`

type UpdateStatusReadParams struct {
	Read      sql.NullBool
	UpdatedAt sql.NullTime
	ID        string
}

func (q *Queries) UpdateStatusRead(ctx context.Context, arg UpdateStatusReadParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusRead, arg.Read, arg.UpdatedAt, arg.ID)
	return err
}
